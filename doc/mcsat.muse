#author Shankar Natarajan, Bruno Dutertre, and Sam Owre
#desc The Manual for using mcsat
#title MCSAT

* Introduction

MCSAT is an implementation of the MCSAT algorithm.  It is both a library
and a standalone system.  Currently it is an alpha release, not yet ready
to be used as a library.

The basic algorithm is described in <cite>Poon&Domingos2006</cite>.

* Running MCSAT

MCSAT is intended to be a library in the long run; for now it is easiest
to run the interactive form.  Simply type =mcsat= (assuming path, etc. are
set properly).  Commands are then entered at the =mcsat>= prompt, followed
by a semicolon.  =quit;= quits, and =help;= displays a brief description of
the available commands.

** Syntax

MCSAT has a very simple syntax.  Names (identifiers) start with a letter,
followed by any character other than parentheses, commas, semicolon,
colon, vertical bar, space, or control characters.  Numbers are simple
floating point numbers: an optional plus or minus, followed by digits
and an optional decimal point.  Whitespace is ignored.

Atoms are predicates applied to constants, e.g., =p(x, y, z)=.  As described
below, predicates have an arity and a signature.  Literals are atoms or
negated atoms, where the tilde "=~=" is used for negation.  Clauses are
disjunctions of literals, separated by vertical bars "=|=".

** Commands

Commands are case-insensitive, and terminated with a semicolon.

*** sort

  Description ::
    MCSAT uses simple sorts - all sorts are disjoint and introduced with
    the =sort= command.
  Syntax ::
    =sort= =NAME= ;
  Example ::
    =sort File;=
 
*** const

  Description ::
    Sorts are empty initially, the =const= command is used to introduce
    elements of a given sort.
  Syntax ::
    =const= =NAMES= : =NAME= ;
  Example ::
    =const fi8, fi22, fi23: File=

*** predicate

  Description ::
    MCSAT supports predicates of any arity, but the sort signature must be
    given.  MCSAT also makes a distinction between direct (observable),
    and indirect predicates.   Internally, direct predicates satisfy
    the closed world assumption, and indirect predicates do not.
  Syntax ::
    =predicate NAME ( NAMES ) IND ;=

    where IND is "=direct=", "=indirect=", or omitted, defaulting to "=direct=".
  Example ::
    =predicate fileHasTask(File, Task) indirect;=

*** atom

  Description ::
    The atom command simply introduces an atom into MCSAT, without any
    associated truth value or weight.
  Syntax ::
    =atom ATOM ;=
  Example ::
    =atom attached(fi42, em58);=

*** assert

  Description ::
    Similar to atom, but used to introduce facts.  Note that negative
    literals may not be asserted, and the predicate must be direct.
  Syntax ::
    =assert ATOM ;=
  Example ::
    =assert fileHasTask(fi8, ta1);=

*** add

  Description ::
    Add is used to introduce weighted clauses and rules.  Rules include
    variables, which are introduced before the clauses.
  Syntax ::
    =add CLAUSE WT ;=
    =add ( NAMES ) CLAUSE WT ;=

    where =WT= is an optional number, defaulting to the maximum double value
    (effectively infinity).
  Example :: <example>
add fileHasTask(fi22, ta1)  1.286;
add (File, Email, Task)
    ~fileHasTask(File, Task) | ~attached(File, Email)
      | emailHasTask(Email, Task);
</example>

*** mcsat

  Description ::
    Runs the MCSAT process, as described in <cite>Poon&Domingos2006</cite>.
  Syntax ::
    =mcsat NUMS=

    where NUMS is a comma-separated list of numbers, representing, in order:

    Parameter || Type || Default
    =sa_probability= | 0.0 .. 1.0 | 0.5
    =samp_temperature= | > 0.0 | 0.91
    =rvar_probability= | 0.0 .. 1.0 | 0.2
    =max_flips= | nat | 1000
    =max_extra_flips= | nat | 10
    =max_samples= | nat | 1000

    Parameters may be omitted, but to set one all preceding ones must also
    be given.

*** ask

  Description ::
    Ask allows MCSAT to be queried.  The mcsat command generates
    probabilities for all atoms, and ask returns atoms matching a literal
    that are above a threshold probability.  As with =add=, variables may be
    given.
  Syntax :: <example>
ask LITERAL THRESHOLD OPTION ;
ask ( NAMES ) LITERAL THRESHOLD OPTION ;
</example>

    where =THRESHOLD= is a number between 0.0 and 1.0, and =OPTION= is
    omitted, "=best=" (returns the highest probability match over the
    threshold), or "=all=" (returns all matches over the threshold, sorted
    by probability).
  Example ::
    =ask (T) emailHasTask(em38, T) .7 all=

*** reset

  Description ::
    Resets the probabilities and number of samples.
  Syntax ::
    =reset ;=

*** dumptables

  Description ::
    Displays the current state of the system.  This includes the sorts
    with their constants, the predicates, all known atoms with their
    current probabilities, clauses, and rules.
  Syntax ::
    =dumptables ;=

*** verbosity

  Description ::
    Sets the verbosity level, used to control how much is printed.
    Defaults to 1.
  Syntax ::
    =verbosity NUM ;=

*** help

  Description ::
    Provides a brief summary of the commands.
  Syntax ::
    =help ;=

*** quit

  Description ::
    Exits mcsat.
  Syntax ::
    =quit ;=

* Example

<include file="../tests/calo1" markup="example">

