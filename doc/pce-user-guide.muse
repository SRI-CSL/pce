#author Shankar Natarajan, Bruno Dutertre, and Sam Owre
#desc User Manual for PCE
#title PCE User Manual

The Probability Consistency Engine (PCE) is part of the Calo project.  It
generates probabilities for atomic formulas using weighted rules and
assertions.  PCE is an OAA agent, responding to and generating solvables
to interact with other agents.  See OAA (http://www.ai.sri.com/~oaa/).

The input to PCE consists of sorts which are arranged in a subsort
hierarchy, constants of specific sorts, direct and indirect predicates over
these sorts, atomic facts asserting a direct predicate of specific
constants, and rules which are universally quantified formulas in both the
direct and indirect predicates along with their associated weights.
The output from PCE is a table listing the marginal probabilities of the
indirect atoms.  This table can be queried for specific patterns of atoms to
obtain the marginal probabilities of instance atoms matching the pattern.

PCE uses the MCSAT method to compute the marginal probabilities.  The direct
atoms, i.e., atoms with direct predicates are only true when they have been
added as facts.  This means the closed world assumption is applied to direct
atoms so that unasserted atoms are treated as false.  Given the truth
assignment to the hard facts, the MCSAT procedure then constructs an initial
model, an assignment of truth values to atoms, satisfying the hard facts.
From this model, it generates a sequence of sampled models using Markov
Chain Monte Carlo sampling.  In each step, we pick the clauses that are
satisfied in the current model.  A subset of these clauses is picked based
on the weights so that clauses with higher weights are chosen with higher
probability.  SampleSAT is used to construct a random model of the chosen
subset of clauses.  This algorithm starts with a random truth assignment and
interleaves simulated annealing with WalkSAT steps to converge on an
assignment that satisfies all the chosen clauses.  The simulated annealing
step picks a random variable and flips its truth value if this reduces the
weight of the unsatisfied clauses.  With some probability, the flip is
executed even when the weight is not reduced so as to move the search out of
a local minimum.  In the WalkSAT step, a random unsatisfied clause is chosen
and the atom corresponding to a random literal is flipped.  The algorithm
implemented in PCE is an online variant of the one used by the Alchemy
system.  PCE also employs a lazy version of the algorithm that creates atoms
only when they become relevant.  

The OAA agents that PCE expects to interact with are the Query Manager,
PCE Harness, and various learners.

At startup, PCE generates a log file in the same directory it was started
from and includes a timestamp, e.g., =pce_2008-11-05T20-34-56.log=.  It then
initializes OAA connections, setting up the solvables.  After that the
internal tables are initialized, and the =pce.init= file is loaded, if it
exists.  Then the =pce.persist= file is loaded if it exists.  Finally, the
OAA main loop is invoked, at which point PCE waits for OAA events.

The =pce.init= and =pce.persist= files are both text files, in the format
expected by MCSAT (see the MCSAT user guide).  The =pce.init= file is
intended for relatively fixed information, e.g., the sort, subsort
relation, and predicate declarations.  Other MCSAT commands may be
included, but these are the most important.  Note that without predicate
declarations PCE will not generate any atoms, and nothing will be
inferred.  The =pce.persist= file is usually not generated by hand, but
reflects the processing that occurred during an earlier session.  Of
course, it is just a text file and may be edited if desired.  It will
generally simply grow monotonically with each new session.

PCE keeps track of all ground atoms, collecting the number of samples for
which they are true; dividing this by the total number of samples taken
gives the probability for the atom.  To provide probabilities for more
complex formulas, PCE must be told the formula of interest, which then
will be sampled along with the atoms.

* PCE Installation

** Obtaining PCE

** Installing PCE
*** Unix
*** Windows (under Cygwin)

* PCE Solvables

 pce_fact(Source,Atom) ::
   States that an Atom is a fact.  Note that the atom is simply a
   predicate applied to constants - negations are not allowed.  The
   predicate must be *direct*.  The Source is just a symbol indicating the
   source of the fact; it is not currently used by PCE.

 pce_learner_assert(Lid,Formula,Weight) ::
   This is used to make weighted assertions.  Lid is a symbol indicating
   the learner generating the assertion - not currently used by PCE.  The
   Formula is an ICL formula.  The weight is a positive or negative
   double.

 pce_learner_assert_list(Lid,List) ::
   This is simply a convenience, so that a learner may pass in a list of
   assertions in one shot.  Each list element is a structure with two
   arguments: a Formula and a Weight (as in =pce_learner_assert=).  The
   structure could be a list, or a function with two argument - the
   functor name is ignored.

 pce_queryp(Q,P) ::
   For a given query Q, PCE will run a series of samples and return the
   probability P.

 pce_subscribe(Lid,Formula,Id) ::
   This is a means for getting PCE to "push" the information to an agent,
   instead of it running =pce_queryp=.  The Formula is stored in internal
   tables, and a subscriber Id is returned.  When
   =pce_process_subscriptions= is invoked, all instances of the Formula and
   associated probabilities are sent via =oaa_Solve=.

 pce_subscribe(Lid,Formula,Who,Condition,Id) ::
   Currently the same as above, Who and Condition are ignored.

 pce_process_subscriptions(X) ::
   For each subscription, this sends a list of formula instances and their
   associated probabilities to the subscriber.

 pce_unsubscribe(Lid,F) ::
   Removes a given formula F from the subscriptions of the given Lid.

 pce_unsubscribe(Lid,F,Who,Condition) ::
   Similar to the above, Who and Condition are ignored.

 pce_unsubscribe(SubscriptionId) ::
   Unsubscribes based on subscription Id, rather than learner id and formula.

 pce_unsubscribe_learner(Lid) ::
   Unsubscribes all formulas associated wth the given learner id.

 pce_full_model(M) ::
   This returns a list of all ground atoms whose probability is greater
   than .51.  This is not actually a model, but is called that for
   historical reasons.

 pce_add_user_defined_rule(Username,Text,Rule) ::
   This is used to provide support for the natural language interface of
   the Calo system.  Users may provide their own rules, using natural
   language syntax.  The rule the user Username typed in is given in Text,
   which is not currently used by PCE.  It is translated by the natural
   language interface into the form
   =implies(Strength,Antecedent,Consequent)=, where Strength is a weight,
   Antecedent and Consequent are the hypothesis and conclusion of the
   rule, respectively.  This is similar to the learner assertions, but in
   addition allows abbreviations, e.g., =clib:= abbreviates
   =http://calo.sri.com/core-plus-office#=.

* Other OAA interactions

 app_idle ::
   This is the idle loop.  It is called by the OAA facilitator often, and
   every minute it checks for new facts and constants from the query
   manager, runs a series of samples, and calls the
   =pce_update_model_callback= (see below).

 oaa_Solve(query(query_pattern('(rdf:type \"Constant\"" ?x))'),[],Result) ::
   When a new constant is provided to PCE, its sort must be determined by
   invoking the query manager with this solvable.

 oaa_Solve(pce_subscription_callback(pce_query_p(Inst, Prob), ...) ::
   This is the solvable generated by =pce_process_subscriptions= (see above).

 oaa_Solve(pce_update_model_callback(Retract, BecameTrueWeights, Flag)) ::
   This is invoked by the idle callback.  The first time, Retract is
   the empty list, and BecameTrueWeights is a list of pairs of ground
   atoms and their probabilities, for those with probability greater than
   .51, and the Flag is "full".  After that, only ground atoms whose value
   has "flipped" are given.  Those that go from true (prob > .51) to false
   are added to the Retract list, while those that go from false (prob <=
   .51) to true are added to the BecameTrueWeights list, along with their
   associated probabilities.  In this case the Flag is "incremental".

 oaa_Solve(agent_data(Address, Type, ready, Solvables, 'QueryManager', Info) ::
   This is used to determine if the query manager is available.  Note that
   without the query manager, PCE will not be able to determine the sort
   of new constants, and will ignore them.

 oaa_Solve(query(query_pattern(PredPat),AnswerPat,Results) ::
   This is used to determine if any new facts are available.  PredPat is
   of the form "'(Pred ?x01,?x02)'", and AnswerPat of the form
   "[answer_pattern('[{?x01},{?x02}]')]".  Again, if the query manager is
   not available, no new facts can be determined.
 
