#author Shankar Natarajan, Bruno Dutertre, and Sam Owre
#desc User Manual for PCE
#title PCE Design

#bibsource mcsat

The Probability Consistency Engine (PCE) is a tool for performing
probabilistic inference in Markov
Logic<cite>Richardson&Domingos:MarkovLogic</cite>.  PCE uses the MCSAT
algorithm <cite>Poon&Domingos2006, Singla&Domingos:LazyMCSat</cite>.
and is part of CALO <cite>calo</cite>, implemented as an
OAA <cite>OAA</cite> agent.  A standalone version of the inference engine
(MCSAT) is available for use without OAA.

PCE uses the MCSAT method to compute the marginal probabilities.  The direct
atoms, i.e., atoms with direct predicates are only true when they have been
added as facts.  This means the closed world assumption is applied to direct
atoms so that unasserted atoms are treated as false.  Given the truth
assignment to the hard facts, the MCSAT procedure then constructs an initial
model, an assignment of truth values to atoms, satisfying the hard facts.
From this model, it generates a sequence of sampled models using Markov
Chain Monte Carlo sampling.  In each step, we pick the clauses that are
satisfied in the current model.  A subset of these clauses is picked based
on the weights so that clauses with higher weights are chosen with higher
probability.  SampleSAT is used to construct a random model of the chosen
subset of clauses.  This algorithm starts with a random truth assignment and
interleaves simulated annealing with WalkSAT steps to converge on an
assignment that satisfies all the chosen clauses.  The simulated annealing
step picks a random variable and flips its truth value if this reduces the
weight of the unsatisfied clauses.  With some probability, the flip is
executed even when the weight is not reduced so as to move the search out of
a local minimum.  In the WalkSAT step, a random unsatisfied clause is chosen
and the atom corresponding to a random literal is flipped.  The algorithm
implemented in PCE is an online variant of the one used by the Alchemy
system.  PCE also employs a lazy version of the algorithm that creates atoms
only when they become relevant.  

The input to PCE consists of sorts which are arranged in a subsort
hierarchy, constants of specific sorts, direct and indirect predicates over
these sorts, atomic facts asserting a direct predicate of specific
constants, and rules which are universally quantified formulas in both the
direct and indirect predicates along with their associated weights.
The output from PCE is a table listing the marginal probabilities of the
indirect atoms.  This table can be queried for specific patterns of atoms to
obtain the marginal probabilities of instance atoms matching the pattern.

The OAA agents that PCE expects to interact with are the Query Manager,
PCE Harness, and various learners.

At startup, PCE generates a log file in the same directory it was started
from and includes a timestamp, e.g., =pce_2008-11-05T20-34-56.log=.  It then
initializes OAA connections, setting up the solvables.  After that the
internal tables are initialized, and the =pce.init= file is loaded, if it
exists.  Then the =pce.persist= file is loaded if it exists.  Finally, the
OAA main loop is invoked, at which point PCE waits for OAA events.

The =pce.init= and =pce.persist= files are both text files, in the format
expected by MCSAT (see the MCSAT user guide).  The =pce.init= file is
intended for relatively fixed information, e.g., the sort, subsort
relation, and predicate declarations.  Other MCSAT commands may be
included, but these are the most important.  Note that without predicate
declarations PCE will not generate any atoms, and nothing will be
inferred.  The =pce.persist= file is usually not generated by hand, but
reflects the processing that occurred during an earlier session.  Of
course, it is just a text file and may be edited if desired.  It will
generally simply grow monotonically with each new session.

PCE keeps track of all ground atoms, collecting the number of samples for
which they are true; dividing this by the total number of samples taken
gives the probability for the atom.  To provide probabilities for more
complex formulas, PCE must be told the formula of interest, which then
will be sampled along with the atoms.

The following sections describe the installation of PCE, invoking PCE, the
PCE solvables, the other OAA interactions, and an Appendix that gives
examples of the various files and output generated by PCE.

* Installation

** Obtaining PCE

PCE is available from SRI, contact [[mailto:owre@csl.sri.com]] for details.
Both source and binaries are available.  PCE requires OAA version 2.3.2.
See [[http://www.ai.sri.com/~oaa/]] for instructions on obtaining and
installing OAA.

** Installing PCE

The easiest way to install PCE is from the tar file, but instructions for
building under Windows (under Cygwin), Linux, MacOSX, and Solaris are
given below.

*** Installing from tar file

The tar file includes binaries for Windows (under Cygwin), Linux, MacOSX,
and Solaris.  To install, simply untar the appropriate tar file in a
convenient directory, (here referred to as =<PARENT>=).  The executable is
in =<PARENT>/bin=, which may be added to your path.  Note that the Windows
executable requires Cygwin ([[http://www/cygwin.com]]).

*** Building from sources

The sources are in the =src= subdirectory.  To build from the source, type:
<example>
  autoconf
  ./configure --with-oaa=<path-to-oaa>
  make bin MODE=static
</example>
This will create platform-specific subdirectories in the =build=
directory, which in turn contain the =bin= directory with the =pce= (and
=mcsat=) executables.

<comment>
There are several modes available in building PCE: static, release, debug,
profile, and valgrind, each of which generates its own =bin=, =obj=, and =lib=
subdirectories.  This allows the developers to create several versions for
debugging, profiling, etc. without having to clean up between modes, or
accidentally providing a slower debug version as part of the binary
release.  Most users will want to use the static version.

Note that the non-static versions require runtime access to the OAA
library.  In Linux, this is done either by adding it to your
=LD_LIBRARY_PATH= environment variable or putting it where =ldconfig= can find
it.
</comment>

**** Windows notes

For windows, it is best to simply use the binaries.  To build the Windows
version requires Cygwin, along with the usual GCC development tools (make,
autoconf, etc.)  See the =README.windows= file for details.

* Running PCE

#pceoptions

PCE needs a running OAA, see the OAA documentation for details.  If OAA is
not running, then PCE will abort.  If you wish to run without OAA, see
MCSAT.  PCE takes a number of arguments, all optional:


 | =-h=, =-?= | =----help=          | prints a help summary |
 |        | <code>----lazy=BOOL</code>     | whether to use lazy version (true) |
 | =-p=     | =----persistmode=   | mode for the pce.persist file, one of |
 |        |                 | =rw= - reads at startup, appends new events |
 |        |                 | =ro= - reads only, no writing |
 |        |                 | =wo= - does not read, but appends new events |
 |        |                 | =none= - no reading or writing |
 | =-v=     | <code>----verbosity=NUM</code> | sets the verbosity level |
 | =-V=     | =----version=       | prints the version number and exits |


* PCE Solvables

 =pce_fact(Source,Atom)= ::
   States that =Atom= is a fact.  Note that the =Atom= is simply a
   predicate applied to constants - negations are not allowed.  The
   predicate must be *direct*.  The =Source= is just a symbol indicating the
   source of the fact; it is not currently used by PCE.

 =pce_learner_assert(Lid,Formula,Weight)= ::
   This is used to make weighted assertions.  =Lid= is a symbol indicating
   the learner generating the assertion - not currently used by PCE.  The
   =Formula= is an ICL formula.  The =Weight= is a positive or negative
   double.

 =pce_learner_assert_list(Lid,List)= ::
   This is simply a convenience, so that a learner may pass in a list of
   assertions in one shot.  Each list element is a structure with two
   arguments: a =Formula= and a =Weight= (as in =pce_learner_assert=).  The
   ICL structure can be a list or a function with two arguments - the
   functor name is ignored.

 =pce_queryp(Q,P)= ::
   For a given query =Q=, PCE will run a series of samples and return the
   probability =P=.

 =pce_subscribe(Lid,Formula,Id)= ::
   This is a means for getting PCE to "push" the information to an agent,
   instead of it running =pce_queryp=.  The Formula is stored in internal
   tables, and a subscriber =Id= is returned.  When
   =pce_process_subscriptions= is invoked, all instances of the =Formula= and
   associated probabilities are sent via =oaa_Solve=.

 =pce_subscribe(Lid,Formula,Who,Condition,Id)= ::
   Currently the same as above, =Who= and =Condition= are ignored.

 =pce_process_subscriptions(X)= ::
   For each subscription, this sends a list of formula instances and their
   associated probabilities to the subscriber.

 =pce_unsubscribe(Lid,F)= ::
   Removes a given formula =F= from the subscriptions of the given =Lid=.

 =pce_unsubscribe(Lid,F,Who,Condition)= ::
   Similar to the above, =Who= and =Condition= are ignored.

 =pce_unsubscribe(SubscriptionId)= ::
   Unsubscribes based on subscription =Id=, rather than learner id and formula.

 =pce_unsubscribe_learner(Lid)= ::
   Unsubscribes all formulas associated with the given learner id =Lid=.

 =pce_full_model(M)= ::
   This returns a list of all ground atoms whose probability is greater
   than .51.  This is not actually a model, but is called that for
   historical reasons.

 =pce_add_user_defined_rule(Username,Text,Rule)= ::
   This is used to provide support for the natural language interface of
   the Calo system.  Users may provide their own rules, using natural
   language syntax.  The rule the user =Username= typed in is given in =Text=,
   which is not currently used by PCE.  It is translated by the natural
   language interface into the form
   =implies(Strength,Antecedent,Consequent)=, where =Strength= is a weight,
   =Antecedent= and =Consequent= are the hypothesis and conclusion of the
   rule, respectively.  This is similar to the learner assertions, but in
   addition allows abbreviations, e.g., =clib:= abbreviates
   =http://calo.sri.com/core-plus-office#=.

* Other OAA interactions

These are interactions involving OAA and external agents that are not PCE
solvables.  =app_idle= is generated by the OAA facilitator, while the others
are solvables generated by external agents (e.g., learners, the Query
Manager, etc.)

 =app_idle= ::
   This is the idle loop.  It is called by the OAA facilitator often, and
   every minute it checks for new facts and constants from the query
   manager, runs a series of samples, and calls the
   =pce_update_model_callback= (see below).

 =oaa_Solve(query(query_pattern('(rdf:type \"Constant\"" ?x))'),[],Result)= ::
   When a new constant is provided to PCE, its sort must be determined by
   invoking the Query Manager with this solvable.

 =oaa_Solve(pce_subscription_callback(pce_query_p(Inst, Prob), ...)= ::
   This is the solvable generated by =pce_process_subscriptions= (see above).

 =oaa_Solve(pce_update_model_callback(Retract, BecameTrueWeights, Flag))= ::
   This is invoked by the idle callback.  The first time, =Retract= is
   the empty list, and =BecameTrueWeights= is a list of pairs of ground
   atoms and their probabilities, for those with probability greater than
   .51, and the =Flag= is "=full=".  After that, only ground atoms whose value
   has "flipped" are given.  Those that go from true (prob > .51) to false
   are added to the =Retract= list, while those that go from false (prob <=
   .51) to true are added to the =BecameTrueWeights= list, along with their
   associated probabilities.  In this case the =Flag= is "=incremental=".

 =oaa_Solve(agent_data(..., 'QueryManager', Info)= ::
   This is used to determine if the query manager is available.  Note that
   without the query manager, PCE will not be able to determine the sort
   of new constants, and will ignore them.

 =oaa_Solve(query(query_pattern(PredPat),AnswerPat,Results)= ::
   This is used to determine if any new facts are available.  =PredPat= is
   of the form "='(Pred ?x01,?x02)'=", and =AnswerPat= of the form
   "=[answer_pattern('[{?x01},{?x02}]')]=".  Again, if the query manager is
   not available, no new facts can be determined.
 
* Appendix

PCE was developed for the CALO project ([[http://caloproject.sri.com/]]).  In
this appendix we provide examples of PCE use in CALO.

** =pce.init=

The =pce.init= file provides the basic sorts, subsorts, and predicates of
the CALO system.  The grammar used is that of the MCSAT tool (see the
MCSAT documentation).  The sorts correspond to the CALO OWL classes, and
subsorts correspond to subclasses.  Predicates in PCE are either *direct* or
*indirect*.  Direct predicates are those that are observed, for example,
that a received email has an attached document
(=fileAttachmentRecordFileIs=).  Indirect predicates are inferred using
weighted assertions.  In practice this means that direct predicates
satisfy the closed world assumption, unlike indirect predicates.

<example>
# Sorts
sort 'http://calo.sri.com/core-plus-office#EmailMessage'; # Email_t;
sort 'http://calo.sri.com/core-plus-office#Project'; # Project_t;
sort 'http://calo.sri.com/core-plus-office#Person'; # Person_t;
sort 'http://calo.sri.com/core-plus-office#WebPage'; # Webpage_t;
sort 'http://calo.sri.com/core-plus-office#DocumentFile'; # File_t;
sort 'http://calo.sri.com/core-plus-office#Task'; # Task_t;
sort 'http://calo.sri.com/core-plus-office#Calendar'; # Calendar_t;
sort 'http://calo.sri.com/core-plus-office#ElectronicPresentationSlide'; # Slide_t;
sort 'http://calo.sri.com/core-plus-office#FileAttachmentRecord';
sort 'http://calo.sri.com/core-plus-office#ComputerFile';

# Predicates
predicate 'http://calo.sri.com/core-plus-office#EmailMessage'
            ('http://calo.sri.com/core-plus-office#EmailMessage') direct;
predicate 'http://calo.sri.com/core-plus-office#Person'
            ('http://calo.sri.com/core-plus-office#Person') direct;
predicate 'http://calo.sri.com/core-plus-office#fileAttachmentRecordFileIs'
            ('http://calo.sri.com/core-plus-office#EmailMessage',
             'http://calo.sri.com/core-plus-office#DocumentFile') direct;
predicate 'http://calo.sri.com/core-plus-office#relatedProjectIs'
            ('http://calo.sri.com/core-plus-office#EmailMessage',
	     'http://calo.sri.com/core-plus-office#Project') indirect;
predicate 'http://calo.sri.com/core-plus-office#emailSenderIs'
            ('http://calo.sri.com/core-plus-office#EmailMessage',
	     'http://calo.sri.com/core-plus-office#Person') indirect;
</example>

** =pce.persist=

The =pce.persist= file is a running summary of the commands given to PCE.
As with the =pce.init= file, it uses the MCSAT grammar.  By default, it is
loaded after the =pce.init= file, and essentially brings in all the facts
and assumptions seen in earlier executions, thereby maintaining the state
of the system from one run to the next.  There are several options
controlling the reading and writing of the =pce.persist= file, as described
in the [[#pceoptions][PCE options]] section.  The =pce.persist= file is not necessary for PCE
to run.


<example>
const 'id://vulcan-392.1202926258953':
   'http://calo.sri.com/core-plus-office#EmailMessage';
add (_7072, _7133, _7323)
   ~'http://calo.sri.com/core-plus-office#EmailMessage'(_7072)
 | ~'http://calo.sri.com/core-plus-office#emailSenderIs'(_7072, _7133)
 | 'http://calo.sri.com/core-plus-office#relatedProjectIs'(_7072, _7323);
</example>

** PCE log files

The =pce.log= file is a simple log file, including the date and time in its
name, e.g., =pce_2009-01-02T15-42-19.log=.  This mostly reflects the output
generated by PCE, though there are some differences.

** PCE standard output and errors

Depending on the verbosity settings, PCE will print running commentary to
standard output and standard error, for example:

<example>
Attempting to open log file pce_2009-01-08T15-16-34.log
Created Log file /homes/owre/calo-owre/mcsat/pce_2009-01-08T15-16-34.log
Initializing OAA
Setting up OAA connection
libcom_tcp com_Connect() Connected to w2k.csl.sri.com 3378
Setting up solvables
Registering solvables
Freeing solvables
Returning from setup_oaa_connection
Loading /homes/owre/calo-owre/mcsat/pce.init
Input from file pce.init
mcsat> Adding sort http://calo.sri.com/core-plus-office#EmailMessage
mcsat> Adding sort http://calo.sri.com/core-plus-office#Project
mcsat> Adding sort http://calo.sri.com/core-plus-office#Person
mcsat> Adding sort http://calo.sri.com/core-plus-office#WebPage
mcsat> Adding sort http://calo.sri.com/core-plus-office#DocumentFile
mcsat> Adding sort http://calo.sri.com/core-plus-office#Task
mcsat> Adding sort http://calo.sri.com/core-plus-office#Calendar
mcsat> Adding sort http://calo.sri.com/core-plus-office#ElectronicPresentationSlide
mcsat> Adding sort http://calo.sri.com/core-plus-office#FileAttachmentRecord
mcsat> Adding sort http://calo.sri.com/core-plus-office#ComputerFile
mcsat> Adding predicate http://calo.sri.com/core-plus-office#relatedProjectIs
mcsat> Adding predicate http://calo.sri.com/core-plus-office#emailSenderIs
mcsat> Adding predicate http://calo.sri.com/core-plus-office#EmailMessage
mcsat> Adding predicate http://calo.sri.com/core-plus-office#Person
mcsat> mcsat> Adding predicate emailAttachmentRecordIs
mcsat> Adding predicate ElectronicPresentationDocument
mcsat> mcsat> Adding predicate fileAttachmentRecordFileIs
mcsat> Adding predicate Webpage
mcsat> Adding predicate DocumentFile
mcsat> Adding predicate EmailMessage
mcsat> mcsat> Adding predicate fileHasTask
mcsat> Adding predicate CalendarEntry
mcsat> Adding predicate emailHasTask
mcsat> Adding predicate ElectronicPresentationSlide
mcsat> Dumping tables...
| Sort                                                             | Constants
--------------------------
| http://calo.sri.com/core-plus-office#EmailMessage                
| http://calo.sri.com/core-plus-office#Project                     
| http://calo.sri.com/core-plus-office#Person                      
| http://calo.sri.com/core-plus-office#WebPage                     
| http://calo.sri.com/core-plus-office#DocumentFile                
| http://calo.sri.com/core-plus-office#Task                        
| http://calo.sri.com/core-plus-office#Calendar                    
| http://calo.sri.com/core-plus-office#ElectronicPresentationSlide 
| http://calo.sri.com/core-plus-office#FileAttachmentRecord        
| http://calo.sri.com/core-plus-office#ComputerFile                
--------------------------
-------------------------------
| Evidence predicates:
-------------------------------
|  http://calo.sri.com/core-plus-office#EmailMessage
        (http://calo.sri.com/core-plus-office#EmailMessage)
|  http://calo.sri.com/core-plus-office#Person
        (http://calo.sri.com/core-plus-office#Person)
|  emailAttachmentRecordIs(http://calo.sri.com/core-plus-office#EmailMessage,
                           http://calo.sri.com/core-plus-office#DocumentFile)
|  ElectronicPresentationDocument(http://calo.sri.com/core-plus-office#DocumentFile)
|  fileAttachmentRecordFileIs(http://calo.sri.com/core-plus-office#EmailMessage,
                              http://calo.sri.com/core-plus-office#DocumentFile)
-------------------------------
| Non-evidence predicates:
-------------------------------
|  http://calo.sri.com/core-plus-office#relatedProjectIs
        (http://calo.sri.com/core-plus-office#EmailMessage,
         http://calo.sri.com/core-plus-office#Project)
|  http://calo.sri.com/core-plus-office#emailSenderIs
        (http://calo.sri.com/core-plus-office#EmailMessage,
         http://calo.sri.com/core-plus-office#Person)
|  Webpage(http://calo.sri.com/core-plus-office#WebPage)
|  DocumentFile(http://calo.sri.com/core-plus-office#DocumentFile)
|  EmailMessage(http://calo.sri.com/core-plus-office#EmailMessage)
|  fileHasTask(http://calo.sri.com/core-plus-office#DocumentFile,
               http://calo.sri.com/core-plus-office#Task)
|  CalendarEntry(http://calo.sri.com/core-plus-office#Calendar)
|  emailHasTask(http://calo.sri.com/core-plus-office#EmailMessage,
                http://calo.sri.com/core-plus-office#Task)
|  ElectronicPresentationSlide
       (http://calo.sri.com/core-plus-office#ElectronicPresentationSlide)
-------------------------------
--------------------------------------------------------------------------------
| i | tval | prob   | atom                                                     |
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Clause Table:

-------------------------------------------------------------------------------
| i | weight    | clause                                                       |
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Rule Table:
--------------------------------------------------------------------------------
| i | weight    | Rule                                                         |
--------------------------------------------------------------------------------
-------------------------------------------------------------------------------
mcsat> QUIT reached, exiting read_eval_print_loop
Loading /homes/owre/calo-owre/mcsat/pce.persist
Input from file pce.persist
mcsat> Adding const id://vulcan-392.1202926258953
mcsat> Adding const id://vulcan-469.1202926277171
mcsat> Adding const id://vulcan-560.1202926318421
mcsat> Adding const id://w2k-189.1203104971656
mcsat> Adding const id://w2k-302.1203105109562
mcsat> Adding const id://w2k-392.1203105250125
mcsat> Adding const id://w2k-251.1204585134275
mcsat> Adding const id://w2k-267.1204585157759
mcsat> Adding const id://w2k-325.1204585202118
mcsat> Adding const id://w2k-405.1204585344478
mcsat> Adding const id://w2k-429.1204585349196
mcsat> Adding const id://w2k-444.1204585364978
mcsat> Adding const id://w2k-1578.1204588156415
mcsat> Adding const id://w2k-1635.1204588217150
mcsat> Adding const id://w2k-1662.1204588227743
mcsat> Adding const id://w2k-1677.1204588238290
mcsat> Adding const id://w2k-1704.1204588259790
mcsat> QUIT reached, exiting read_eval_print_loop
Entering MainLoop
Ready.
Calling QM for instances of predicate
   http://calo.sri.com/core-plus-office#relatedProjectIs
Instances for http://calo.sri.com/core-plus-office#relatedProjectIs are
   [query(_7218,_7248,
    answer([],[error('Invalid KIF query:
                      (http://calo.sri.com/core-plus-office#relatedProjectIs
                       ?x01 ?x02)')]))]
: unknown
Calling QM for instances of predicate EmailMessage
Instances for EmailMessage are
  [query(_7218,_7248,
    answer(
      ['["id://vulcan-392.1202926258953"]','["id://vulcan-469.1202926277171"]',
       '["id://vulcan-560.1202926318421"]','["id://w2k-189.1203104971656"]',
       '["id://w2k-302.1203105109562"]','["id://w2k-392.1203105250125"]',
       '["id://w2k-251.1204585134275"]','["id://w2k-267.1204585157759"]',
       '["id://w2k-325.1204585202118"]','["id://w2k-405.1204585344478"]',
       '["id://w2k-429.1204585349196"]','["id://w2k-444.1204585364978"]',
       '["id://w2k-1578.1204588156415"]','["id://w2k-1635.1204588217150"]',
       '["id://w2k-1662.1204588227743"]','["id://w2k-1677.1204588238290"]',
       '["id://w2k-1704.1204588259790"]'],[process_handle(-1),status([end])]))]
 17 instances, 0 new constants
...
Calling pce_update_model

</example>
