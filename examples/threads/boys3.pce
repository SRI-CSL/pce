sort Day;
sort Child;
const Mo, Tu, We, Th, Fr, Sa, Su: Day;
const A, B: Child;
predicate boy(Child) hidden;
predicate born_on(Child, Day) hidden;

add [c] born_on(c, Mo) or born_on(c, Tu) or born_on(c, We)
     or born_on(c, Th) or born_on(c, Fr) or born_on(c, Sa)
     or born_on(c, Su);
add [c, d1, d2] (born_on(c, d1) and born_on(c, d2)) implies d1 = d2;
add (born_on(A, Tu) and boy(A)) or (born_on(B, Tu) and boy(B));

set mcsat_thread_count 3;
set max_samples 5000;
#set gibbs_steps 3;
set gibbs_steps 80;
mcsat_params;

ask (boy(A) and boy(B));

ask (boy(A) and ~boy(B)) or (boy(B) and ~boy(A));

ask (boy(A) and boy(B) and born_on(A, Tu) and born_on(B, Tu));

ask (boy(A) and boy(B) and born_on(A, Tu) and born_on(B, Mo));
ask (boy(A) and boy(B) and born_on(A, Tu) and born_on(B, We));
ask (boy(A) and boy(B) and born_on(A, Tu) and born_on(B, Th));
ask (boy(A) and boy(B) and born_on(A, Tu) and born_on(B, Fr));
ask (boy(A) and boy(B) and born_on(A, Tu) and born_on(B, Sa));
ask (boy(A) and boy(B) and born_on(A, Tu) and born_on(B, Su));

ask (boy(A) and boy(B) and born_on(A, Mo) and born_on(B, Tu));
ask (boy(A) and boy(B) and born_on(A, We) and born_on(B, Tu));
ask (boy(A) and boy(B) and born_on(A, Th) and born_on(B, Tu));
ask (boy(A) and boy(B) and born_on(A, Fr) and born_on(B, Tu));
ask (boy(A) and boy(B) and born_on(A, Sa) and born_on(B, Tu));
ask (boy(A) and boy(B) and born_on(A, Su) and born_on(B, Tu));

ask (boy(A) and ~boy(B) and born_on(A, Tu) and born_on(B, Mo));
ask (boy(A) and ~boy(B) and born_on(A, Tu) and born_on(B, Tu));
ask (boy(A) and ~boy(B) and born_on(A, Tu) and born_on(B, We));
ask (boy(A) and ~boy(B) and born_on(A, Tu) and born_on(B, Th));
ask (boy(A) and ~boy(B) and born_on(A, Tu) and born_on(B, Fr));
ask (boy(A) and ~boy(B) and born_on(A, Tu) and born_on(B, Sa));
ask (boy(A) and ~boy(B) and born_on(A, Tu) and born_on(B, Su));

ask (~boy(A) and boy(B) and born_on(A, Mo) and born_on(B, Tu));
ask (~boy(A) and boy(B) and born_on(A, Tu) and born_on(B, Tu));
ask (~boy(A) and boy(B) and born_on(A, We) and born_on(B, Tu));
ask (~boy(A) and boy(B) and born_on(A, Th) and born_on(B, Tu));
ask (~boy(A) and boy(B) and born_on(A, Fr) and born_on(B, Tu));
ask (~boy(A) and boy(B) and born_on(A, Sa) and born_on(B, Tu));
ask (~boy(A) and boy(B) and born_on(A, Su) and born_on(B, Tu));

#mcsat_params 1000, .5, 5, .05, 1000, 5,,100,;
#mcsat;
#dumptables qinst;
